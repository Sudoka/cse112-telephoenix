require 'digest/sha1'

class User < ActiveRecord::Base
  has_many :reviews
  #make_flagr
  #make_flaggable :flag_once => true
  make_flagger
  attr_accessible :username, :email, :password, :password_confirmation, :ip_address
  attr_protected :id, :salt, :user_type
  attr_accessor :password, :password_confirmation
  validates_length_of :username, :password, :within => 5..40      , :on => :register
  validates_presence_of :username, :password, :password_confirmation, :salt , :on => :register
  validates_presence_of :email
  validates_uniqueness_of :username, :email      , :on => :register
  validates_confirmation_of :password  , :on => :register # :if => :no_omniauth?
  validates_format_of :email, :with => /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i, :message => "Invalid email"

  def self.authenticate(username, pass)
    u=find(:first, :conditions=>["username = ?", username])
    return nil if u.nil?
    User.random_moderator(u)
    return u if User.encrypt(pass, u.salt)==u.hashed_password
    nil
  end 

  def password=(pass)
    @password=pass
    self.salt = User.random_string(10) if !self.salt?
    self.hashed_password = User.encrypt(@password, self.salt)
  end

  def change_new_password
    new_pass = User.random_string(10)
    self.password = new_pass
    self.password_confirmation = new_pass
    self.save!
    #Notifications.deliver_forgot_password(self.email, self.username, new_pass)
    #debugger
    self.delay.send_password(self, new_pass)
  end
  
  def send_password (user, password)
      UserMailer.send_password(user, password).deliver
  end
  ##
  def no_omniauth?
      self.provider.nil?
  end

  def self.from_omniauth(auth)
   
     user = where(auth.slice(:provider, :uid)).first
     if user.nil?
        user = find_by_email auth.info.email
        if user.nil?
           user = User.new
        end
     end
     user.provider = auth.provider
     user.uid = auth.uid      
     user.oauth_token = auth.credentials.token
     user.oauth_expires_at = Time.at(auth.credentials.expires_at)
     
     user.username = auth.info.name
     
     user.email = auth.info.email
     user.image = auth.info.image
     user.save!
     return user
    
  end
  protected

  def self.encrypt(pass, salt)
    Digest::SHA1.hexdigest(pass+salt)
  end

  def self.random_string(len)
    #generat a random password consisting of strings and digits
    chars = ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a
    newpass = ""
    1.upto(len) { |i| newpass << chars[rand(chars.size-1)] }
    return newpass
  end

  def self.random_moderator(usr)
  #  if rand(2) == 1
  #    usr.user_type = Moderator.to_s
  #  else
      usr.user_type = User.to_s
  #  end
  end

  def comment_remind ( commenter)
      UserMailer.comment_review(self, commenter).deliver
  end
  def signup_confirmation
      UserMailer.signup_confirmation(self).deliver
  end
end
